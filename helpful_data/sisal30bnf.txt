BNF SISAL 3.0

Модуль

<интерфейс модуля> ::= declaration <идентификатор> uses <список идентификаторов> <объявления модуля> или
 declaration <идентификатор> <объявления модуля> или
 declaration <идентификатор>
<реализация модуля> ::= definition <идентификатор> uses <список идентификаторов> <определения модуля> или
 definition <идентификатор> <определения модуля> или
 definition <идентификатор>
<объявления модуля> ::= <объявление модуля> <объявления модуля> или
 <объявление модуля>
<определения модуля> ::= <определение модуля> <определения модуля> или
 <определение модуля>
<объявление модуля> ::= <определение типа> или
 <объявление функции> или
 <объявление операции> или
 <объявление редукции>
<определение модуля> ::= <определение типа> или
 <определение функции> или
 <определение операции> или
 <определение редукции> или
 forward <объявление функции> или
 forward <объявление операции> или
 forward <объявление редукции>
Определение типа

<определение типа> ::= <определение переименования типа> или
 <определение пользовательского типа>
<определение переименования типа> ::= <идентификатор> = <тип>
<определение пользовательского типа> ::= <идентификатор> := <тип>
<тип> ::= <идентификатор::> или
 type ( <выражение> ) или
 array [ <тип> ] или
 stream [ <тип> ] или
 record [ <список полей> ] или
 union [ <список тегов союза> ] или
 function [ <список типов> returns <список типов> ] или
 function [ returns <список типов> ] или
 set [ <список типов> ] или
 array или
 stream или
 record или
 union или
 function
<список полей> ::= <список идентификаторов> : <тип> ; <список полей> или
 <список идентификаторов> : <тип>
<список тегов союза> ::= <тег союза> ; <список тегов союза> или
 <тег союза>
<тег союза> ::= <список идентификаторов> : <тип> или
 <список идентификаторов>
<список типов> ::= <тип> , <список типов> или
 <тип>
Функция

<объявление функции> ::= function <идентификатор> [ <список типов> returns <список типов> ] или
 function <идентификатор> [ returns <список типов> ] или
 function <идентификатор> ( <список полей> returns <список типов> ) или
 function <идентификатор> ( returns <список типов> )
<определение функции> ::= function <идентификатор> ( <список полей> returns <список типов> ) <список выражений> end function или
 function <идентификатор> ( returns <список типов> ) <список выражений> end function
<функция> ::= function ( <список полей> returns <список типов> ) <список выражений> end function или
 function ( returns <список типов> ) <список выражений> end function
Операция

<объявление операции> ::= operation <знак унарной операции> [ <тип> returns <тип> ] или
 operation <знак унарной операции> ( <идентификатор> : <тип> returns <тип> ) или
 operation <знак бинарной операции> [ <тип> , <тип> returns <тип> ] или
 operation <знак бинарной операции сравнения> [ <тип> , <тип> returns boolean ] или
 operation <знак бинарной операции> ( <два аргумента> returns <тип> ) или
 operation <знак бинарной операции сравнения> ( <два аргумента> returns boolean ) или
 operation () [ <список типов> returns <список типов> ] или
 operation () ( <список полей> returns <список типов> )
<определение операции> ::= operation <знак унарной операции> ( <идентификатор> : <тип> returns <тип> ) <выражение> end operation или
 operation <знак бинарной операции> ( <два аргумента> returns <тип> ) <выражение> end operation или
 operation <знак бинарной операции сравнения> ( <два аргумента> returns boolean ) <выражение> end operation или
 operation () ( <список полей> returns <список типов> ) <список выражений> end operation
<два аргумента> ::= <идентификатор> , <идентификатор> : <тип> или
 <идентификатор> : <тип> ; <идентификатор> : <тип>
<знак унарной операции> ::= + или
 - или
 ~ или
 . <идентификатор>
<знак бинарной операции> ::= || или
 | или
 ^ или
 & или
 + или
 - или
 * или
 / или
 % или
 ** или
 []
<знак бинарной операции сравнения> ::= = или
 <
Редукции

<объявление редукции> ::= reduction <идентификатор> [ <список типов> repeat <список типов> returns <список типов> ] или
 reduction <идентификатор> ( <список полей> repeat <список полей> returns <список типов> ) или
 reduction <идентификатор> [ repeat <список типов> returns <список типов> ] или
 reduction <идентификатор> ( repeat <список полей> returns <список типов> )
<определение редукции> ::= reduction <идентификатор> ( <список полей> repeat <список полей> returns <список типов> ) for initial <список определений> repeat <список определений> returns <последовательность value of> end for end reduction или
 reduction <идентификатор> ( repeat <список полей> returns <список типов> ) for initial <список определений> repeat <список определений> returns <последовательность value of> end for end reduction или
 reduction <идентификатор> ( <список полей> repeat <список полей> returns <список типов> ) for repeat <список определений> returns <последовательность value of> end for end reduction или
 reduction <идентификатор> ( repeat <список полей> returns <список типов> ) for repeat <список определений> returns <последовательность value of> end for end reduction
<последовательность value of> ::= value of <выражение> <последовательность value of> или
 value of <выражение>
Выражение

<выражение> ::= <конкатенация строк>
<конкатенация строк> ::= <конкатенация строк> || <логическое ИЛИ> или
 <логическое ИЛИ>
<логическое ИЛИ> ::= <логическое ИЛИ> | <логическое ИСКЛЮЧАЮЩЕЕ ИЛИ> или
 <логическое ИСКЛЮЧАЮЩЕЕ ИЛИ>
<логическое ИСКЛЮЧАЮЩЕЕ ИЛИ> ::= <логическое ИСКЛЮЧАЮЩЕЕ ИЛИ> ^ <логическое И> или
 <логическое И>
<логическое И> ::= <логическое И> & <операции сравнения> или
 <операции сравнения>
<операции сравнения> ::= <операции сравнения> = <операции с приоритетом = 1> или
 <операции сравнения> ~= <операции с приоритетом = 1> или
 <операции сравнения> < <операции с приоритетом = 1> или
 <операции сравнения> > <операции с приоритетом = 1> или
 <операции сравнения> <= <операции с приоритетом = 1> или
 <операции сравнения> >= <операции с приоритетом = 1> или
 <операции с приоритетом = 1>
<операции с приоритетом = 1> ::= <операции с приоритетом = 1> + <операции с приоритетом = 2> или
 <операции с приоритетом = 1> - <операции с приоритетом = 2> или
 <операции с приоритетом = 2>
<операции с приоритетом = 2> ::= <операции с приоритетом = 2> * <возведение в степень> или
 <операции с приоритетом = 2> / <возведение в степень> или
 <операции с приоритетом = 2> % <возведение в степень> или
 <возведение в степень>
<возведение в степень> ::= <унарные операции> ** <возведение в степень> или
 <унарные операции>
<унарные операции> ::= - <унарные операции> или
 + <унарные операции> или
 ~ <унарные операции> или
 <постфиксные операции>
<постфиксные операции> ::= <постфиксные операции> ( <список аргументов функции> ) или
 <постфиксные операции> ( ) или
 <постфиксные операции> [ <выборка или замещение элементов массива> ] или
 <постфиксные операции> . <идентификатор> или
 <постфиксные операции> replace { <список определений> } или
 <постфиксные операции> tag <идентификатор> или
 <постфиксные операции> : <тип> или
 ( <выражение> ) или
 <операнд>
<список аргументов функции> ::= <аргумент функции> , <список аргументов функции> или
 , <список аргументов функции> или
 <аргумент функции> , или
 <аргумент функции>
<аргумент функции> ::= <выражение> или
 : <тип>
<список выражений> ::= <выражение> , <список выражений> или
 <выражение>
Операнд

<операнд> ::= <идентификатор::> или
 old <идентификатор> или
 function <идентификатор::> [ <список типов> ] или
 function <идентификатор::> или
 operation <знак унарной операции> [ <тип> ] или
 operation <знак бинарной операции> [ <тип> , <тип> ] или
 <константа> или
 <выражение let> или
 <выражение if> или
 <выражение case> или
 <выражение where> или
 <выражение цикла> или
 <функция> или
 <массив> или
 <поток> или
 <запись> или
 <союз> или
 is error ( <выражение> ) или
 type ( <выражение> ) или
 type [ <тип> ] или
 error [ <тип> ]
Выражение let

<выражение let> ::= let <список определений> in <список выражений> end let
<список определений> ::= <левая часть определения> := <выражение> ; <список определений> или
 <левая часть определения> := <выражение>
<левая часть определения> ::= <имя с опциональным типом> , <левая часть определения> или
 , <левая часть определения> или
 <имя с опциональным типом> , или
 <имя с опциональным типом>
<имя с опциональным типом> ::= <идентификатор> : <тип> или
 <идентификатор>
Выражение if

<выражение if> ::= if <выражение> then <список выражений> else <список выражений> end if или
 if <выражение> then <список выражений> <ветви elseif> else <список выражений> end if
<ветви elseif> ::= elseif <выражение> then <список выражений> <ветви elseif> или
 elseif <выражение> then <список выражений>
Выражение case

<выражение case> ::= <простое выражение case> или
 <выражение case type> или
 <выражение case tag>
<простое выражение case> ::= case <выражение> <ветви case of> end case или
 case <выражение> <ветви case of> else <список выражений> end case
<ветви case of> ::= of <список условий case of> then <список выражений> <ветви case of> или
 of <список условий case of> then <список выражений>
<список условий case of> ::= <условие case of> , <список условий case of> или
 <условие case of>
<условие case of> ::= <выражение> или
 <выражение> ! <выражение>
<выражение case type> ::= case type <выражение> <ветви case type of> end case или
 case type <выражение> <ветви case type of> else <список выражений> end case
<ветви case type of> ::= of <список типов> then <список выражений> <ветви case type of> или
 of <список типов> then <список выражений>
<выражение case tag> ::= case tag <выражение> <ветви case tag of> end case или
 case tag <выражение> <ветви case tag of> else <список выражений> end case
<ветви case tag of> ::= of <список идентификаторов> then <список выражений> <ветви case tag of> или
 of <список идентификаторов> then <список выражений>
Выражение where

<выражение where> ::= where <выражение> is <идентификатор> in <выражение> end where
Выражение цикла

<выражение цикла> ::= for <генератор диапазона for> repeat <список определений> returns <предложение возврата> end for или
 for <генератор диапазона for> returns <предложение возврата> end for или
 for initial <список определений> while <выражение> repeat <список определений> returns <предложение возврата> end for или
 for initial <список определений> while <выражение> returns <предложение возврата> end for или
 for initial <список определений> repeat <список определений> while <выражение> returns <предложение возврата> end for или
 for while <выражение> repeat <список определений> returns <предложение возврата> end for или
 for while <выражение> returns <предложение возврата> end for или
 for repeat <список определений> while <выражение> returns <предложение возврата> end for
<генератор диапазона for> ::= <идентификатор> in <диапазон индексов for> at <список идентификаторов> или
 <диапазон индексов for> cross <генератор диапазона for> или
 <диапазон индексов for> dot <генератор диапазона for> или
 <диапазон индексов for>
<диапазон индексов for> ::= <выражение> или
 <выражение>, <выражение> или
 <выражение>, <выражение>, <выражение>
<предложение возврата> ::= <редукция с начальными параметрами> of <список выражений> when <список выражений> ; <предложение возврата> или
 <редукция с начальными параметрами> of <список выражений> ; <предложение возврата> или
 <редукция с начальными параметрами> of <список выражений> when <список выражений> или
 <редукция с начальными параметрами> of <список выражений>
<редукция с начальными параметрами> ::= <имя редукции> ( <список выражений> ) или
 <имя редукции>
<имя редукции> ::= <идентификатор::> или
 array или
 array [ <натуральное число> ] или
 stream или
 stream [ <натуральное число> ]
Конструкторы типов

<массив> ::= array <идентификатор::> { <выражение> ; <список выражений> } или
 array <идентификатор::> { <список выражений> } или
 array <идентификатор::> { } или
 array [ <тип> ] { <выражение> ; <список выражений> } или
 array [ <тип> ] { <список выражений> } или
 array [ <тип> ] { } или
 <идентификатор::> { <выражение> ; <список выражений> } или
 <идентификатор::> { <список выражений> } или
 <идентификатор::> { } или
 array { <выражение> ; <список выражений> } или
 array { <список выражений> }
<поток> ::= stream <идентификатор::> { <список выражений> } или
 stream <идентификатор::> { } или
 stream [ <тип> ] { <список выражений> } или
 stream [ <тип> ] { } или
 <идентификатор::> { <список выражений> } или
 <идентификатор::> { } или
 stream { <список выражений> }
<запись> ::= record <идентификатор::> { <список определений> } или
 record <идентификатор::> { := <список выражений> } или
 record [ <список полей> ] { <список определений> } или
 record [ <список полей> ] { := <список выражений> } или
 <идентификатор::> { <список определений> } или
 <идентификатор::> { := <список выражений> } или
 record { <список определений> }
<союз> ::= union <идентификатор::> { <идентификатор> := <выражение> } или
 union [ <список тегов союза> ] { <идентификатор> := <выражение> } или
 <идентификатор::> { <идентификатор> := <выражение> }
Выборка или замещение элементов массива

<выборка или замещение элементов массива> ::= <выборка или замещение элементов массива> ; <выражение выборки элементов массива> или
 <выражение выборки элементов массива> или
 <выражение выборки элементов массива> := <выражение> или
 <список выражений> := <список выражений>
<выражение выборки элементов массива> ::= <dot последовательность> , <выражение выборки элементов массива> или
 <dot последовательность> cross <выражение выборки элементов массива> или
 <dot последовательность>
<dot последовательность> ::= <именованный диапазон индексов массива> dot <dot последовательность> или
 <именованный диапазон индексов массива>
<именованный диапазон индексов массива> ::= <выражение> или
 <триплет> или
 <идентификатор> in <выражение> или
 <идентификатор> in <триплет>
<триплет> ::= <выражение> ! <выражение> или
 <выражение> ! <выражение> ! <выражение> или
 ! или
 ! <выражение> или
 <выражение> ! или
 ! <выражение> ! <выражение> или
 <выражение> ! ! <выражение> или
 ! ! <выражение>
Идентификатор

<идентификатор::> ::= <идентификатор> :: <идентификатор> или
 <идентификатор>
<идентификатор> ::= _<идентификатор без первого символа> или
 <буква><идентификатор без первого символа> или
 <буква>
<идентификатор без первого символа> ::= _<идентификатор без первого символа> или
 <буква><идентификатор без первого символа> или
 <цифра><идентификатор без первого символа> или
 _ или
 <буква> или
 <цифра>
<список идентификаторов> ::= <идентификатор> , <список идентификаторов> или
 <идентификатор>
Константа

<константа> ::= true или
 false или
 nil или
 <натуральное число> или
 <действительное число> или
 <символьный литерал> или
 <строковой литерал>
<натуральное число> ::= <последовательность цифр> или
 <цифра>#<последовательность цифр> или
 <цифра><цифра>#<последовательность цифр и букв>
<последовательность цифр> ::= <цифра><последовательность цифр> или
 <цифра>
<последовательность цифр и букв> ::= <цифра><последовательность цифр и букв> или
 <буква><последовательность цифр и букв> или
 <цифра> или
 <буква>
<действительное число> ::= <действительное число одинарной точности> или
 <действительное число двойной точности>
<действительное число одинарной точности> ::= <последовательность цифр>.<последовательность цифр> или
 <последовательность цифр>. или
 .<последовательность цифр> или
 <действительное число без экспоненты><экспонента одинарной точности>
<действительное число двойной точности> ::= <действительное число без экспоненты><экспонента двойной точности>
<действительное число без экспоненты> ::= <последовательность цифр>.<последовательность цифр> или
 .<последовательность цифр> или
 <последовательность цифр>
<экспонента одинарной точности> ::= <буква eE><последовательность цифр> или
 <буква eE>-<последовательность цифр>
<буква eE> ::= e или
 E
<экспонента двойной точности> ::= <буква dD><последовательность цифр> или
 <буква dD>-<последовательность цифр> или
 <буква dD>
<буква dD> ::= d или
 D
<символьный литерал> ::= '<символ>' или
 '<обратный слэш с символом>' или
 '<обратный слэш с кодом символом>'
<обратный слэш с символом> ::= \a или
 \b или
 \f или
 \n или
 \r или
 \t или
 \v или
 \\ или
 \" или
 \'
<обратный слэш с кодом символом> ::= \<последовательность цифр> или
 \o<последовательность цифр> или
 \h<последовательность цифр и букв>
<escape последовательность> ::= <обратный слэш с кодом символом><escape последовательность> или
 <обратный слэш с кодом символом>; или
 <обратный слэш с символом>
<строковой литерал> ::= "<последовательность символов и escape последовательностей>"
<последовательность символов и escape последовательностей> ::= <символ><последовательность символов и escape последовательностей> или
 <escape последовательность><последовательность символов и escape последовательностей> или
 <символ> или
 <escape последовательность>
Понятия низкого уровня

<символ> ::= UNICODE символ с кодами от 0x20 (' ') до 0xffff
<разделитель> ::= UNICODE символ с кодами от 0x9 до 0xd или
 UNICODE символ с кодом 0x20 (' ')
<буква> ::= UNICODE символ с кодами от 0x41 ('A') до 0x5a ('Z') или
 UNICODE символ с кодами от 0x61 ('a') до 0x7a ('z')
<цифра> ::= UNICODE символ с кодами от 0x30 ('0') до 0x39 ('9')